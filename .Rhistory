temp_df$month = substr(temp_df$date, start = 7, stop = 8)
temp_df <- temp_df %>% filter(month == "03") %>% group_by(year) %>% summarise(temp = sum(runoff))
head(temp_df)
temp_df <- temp_df %>% filter(month == "03") %>% group_by(year) %>% summarise(runoff = sum(runoff))
# Convert SpatialPolygonDataframe into dataframe
temp_df<- as.data.frame(temp)
head(temp_df)
# Make data long
temp_df <- gather(temp_df, date, runoff, 5:ncol(temp_df), factor_key = T)
# Select daily rows and take monthly average
temp_df$year = substr(temp_df$date, start = 2, stop = 5)
temp_df$month = substr(temp_df$date, start = 7, stop = 8)
temp_df <- temp_df %>% filter(month == "03") %>% group_by(year) %>% summarise(runoff = sum(runoff))
head(temp_df)
## Export data
write.csv(temp_df, "ERA5-Mar-runoff.csv", row.names = F)
runoff <- read.csv("ERA5-Mar-runoff.csv")
runoff
vars <- full_join(temp, runoff)
#### Join all data together
temp1 <- read.csv("ERA5-Mar-temp_early.csv")
temp2 <-read.csv("ERA5-Mar-temp_2002-2022.csv")
temp <- rbind(temp1, temp2) %>% select(year, temp)
runoff <- read.csv("ERA5-Mar-runoff.csv")
vars <- full_join(temp, runoff)
head(vars)
# lake ice depth
ice <- read.csv("ERA5-Mar-icedepth.csv")
ice
# lake ice depth
ice <- read.csv("ERA5-Mar-icedepth.csv") %>% select(year, ice_depth)
# Join all vars
vars <- full_join(temp, runoff, ice)
# lake ice depth
ice <- read.csv("ERA5-Mar-icedepth.csv") %>% select(year, ice_depth)
ice
# Join all vars
vars <- full_join(temp, runoff, ice)
# Join all vars
vars <- full_join(temp, runoff)
vars <- full_join(vars, ice)
head(vars)
vars %>% ggplot(aes(year, temp)) + geom_line()
vars %>% ggplot(aes(year, temp)) + geom_line() + geom_line(aes(year, runoff), color = "green") + geom_line(aes(year, ice_depth), color = "blue")
# Make a blank stack (using stack()) to store rasterlayer data and use a brick() command to read it.
listfile <- list.files(path = "Data/", pattern="Lakeice.nc", full.names = TRUE)
listfile
## Covert to raster stack
d0 <- stack()
library(ecmwfr)
library(ncdf4)
library(raster) # package for raster manipulation
library(sf) # package for geospatial analysis
library(terra)
library(tidyr)
library(dplyr)
library(data.table)
library(ggplot2)
# Make a blank stack (using stack()) to store rasterlayer data and use a brick() command to read it.
listfile <- list.files(path = "Data/", pattern="Lakeice.nc", full.names = TRUE)
listfile
## Covert to raster stack
d0 <- stack()
for (i in 1:length(listfile)) {
#read data
filename <- brick(listfile[i])
d0 <- stack(d0,  filename)
}
nlayers(d0)
## Read in watershed boundaries from shapefile
shape.watershed <- st_read("Data/Watershed/AK_discharge.shp")
## Extract mean of raster values within each watershed to list object
temp = raster::extract(d0, shape.watershed, method="simple", fun=mean, sp=T, df=TRUE)
# Convert SpatialPolygonDataframe into dataframe
temp_df<- as.data.frame(temp)
head(temp_df)
# Make data long
temp_df <- gather(temp_df, date, ice_depth, 5:ncol(temp_df), factor_key = T)
# Select daily rows and take monthly average
temp_df$year = substr(temp_df$date, start = 2, stop = 5)
temp_df$month = substr(temp_df$date, start = 7, stop = 8)
temp_df <- temp_df %>% filter(month == "03") %>% group_by(year) %>% summarise(ice_depth = sum(ice_depth))
head(temp_df)
## Export data
write.csv(temp_df, "ERA5-Mar-icedepth.csv", row.names = F)
# Make a blank stack (using stack()) to store rasterlayer data and use a brick() command to read it.
listfile <- list.files(path = "Data/", pattern="SWE.nc", full.names = TRUE)
listfile
## Covert to raster stack
d0 <- stack()
for (i in 1:length(listfile)) {
#read data
filename <- brick(listfile[i])
d0 <- stack(d0,  filename)
}
nlayers(d0)
## Read in watershed boundaries from shapefile
shape.watershed <- st_read("Data/Watershed/AK_discharge.shp")
## Extract mean of raster values within each watershed to list object
temp = raster::extract(d0, shape.watershed, method="simple", fun=mean, sp=T, df=TRUE)
# Convert SpatialPolygonDataframe into dataframe
temp_df<- as.data.frame(temp)
head(temp_df)
# Make data long
temp_df <- gather(temp_df, date, SWE, 5:ncol(temp_df), factor_key = T)
# Select daily rows and take monthly average
temp_df$year = substr(temp_df$date, start = 2, stop = 5)
temp_df$month = substr(temp_df$date, start = 7, stop = 8)
temp_df <- temp_df %>% filter(month == "03") %>% group_by(year) %>% summarise(SWE = sum(SWE))
head(temp_df)
## Export data
write.csv(temp_df, "ERA5-Mar-SWE.csv", row.names = F)
# SWE
swe <- read.csv("SWE.csv")
# SWE
swe <- read.csv("ERA5-Mar-SWE.csv")
swe
# Join all vars
vars <- full_join(temp, runoff)
#### Join all data together
temp1 <- read.csv("ERA5-Mar-temp_early.csv")
temp2 <-read.csv("ERA5-Mar-temp_2002-2022.csv")
temp <- rbind(temp1, temp2) %>% select(year, temp)
runoff <- read.csv("ERA5-Mar-runoff.csv")
# lake ice depth
ice <- read.csv("ERA5-Mar-icedepth.csv") %>% select(year, ice_depth)
# SWE
swe <- read.csv("ERA5-Mar-SWE.csv")
# Join all vars
vars <- full_join(temp, runoff)
vars <- full_join(vars, ice)
vars <- full_join(vars, swe)
head(vars)
vars %>% ggplot(aes(year, temp)) + geom_line() + geom_line(aes(year, runoff), color = "green") + geom_line(aes(year, ice_depth), color = "blue")
vars %>% ggplot(aes(year, temp)) + geom_line() + geom_line(aes(year, runoff), color = "green") + geom_line(aes(year, ice_depth), color = "blue") +
geom_line(aes(year, SWE), color = "yellow")
any(is.na(vars))
View(vars)
write.csv("covars.csv", row.names = F)
write.csv(vars, "covars.csv", row.names = F)
#### MARSS models with ERA5 covariates
library(ggplot2)
library(dplyr)
library(lubridate)
library(discharge)
library(tidyverse)
library(data.table)
## Read in tower dates
break <- read.csv("NenanaIceClassic_1917-2021.csv")
## Read in tower dates
break <- read.csv("Data/NenanaIceClassic_1917-2021.csv")
## Read in tower dates
dat <- read.csv("Data/NenanaIceClassic_1917-2021.csv")
head(dat)
## PDO data
PDO <- read.table("Data/PDO.dat.txt", skip = 1, header = T) %>% pivot_longer(cols = Jan:Dec, names_to = "Month", values_to = "PDO")
# Take yearly average and crop to length of variables
PDO <- PDO %>% group_by(year) %>% summarise(PDO = mean(PDO)) %>% filter(year >= 1917 & year <= 2021)
# Take yearly average and crop to length of variables
PDO <- PDO %>% group_by(year) %>% summarise(PDO = mean(PDO)) %>% filter(Year >= 1917 & Year <= 2021)
PDO
# Take yearly average and crop to length of variables
PDO <- PDO %>% group_by(Year) %>% summarise(PDO = mean(PDO)) %>% filter(Year >= 1917 & Year <= 2021)
### Covariates
covars <- read.csv("covars.csv")
covars
# Take yearly average and crop to length of variables
PDO <- PDO %>% group_by(Year) %>% summarise(PDO = mean(PDO)) %>% filter(Year >= 1917 & Year <= 2021) %>% rename(year == Year)
# Take yearly average and crop to length of variables
PDO <- PDO %>% group_by(Year) %>% summarise(PDO = mean(PDO)) %>% filter(Year >= 1917 & Year <= 2021) %>% rename(year = Year)
PDO
### Covariates
covars <- read.csv("covars.csv")
covars <- left_join(covars, PDO)
head(covars)
data <- left_join(covars, dat)
head(dat)
## Read in tower dates
dat <- read.csv("Data/NenanaIceClassic_1917-2021.csv") %>% rename(year = Year, doy = Decimal_doy)
head(dat)
data <- left_join(covars, dat)
head(covars)
head(data)
# Check covariance
cov(covars)
data <- left_join(covars, dat) %>% filter(year < 2021)
head(data)
# Check covariance
cov(covars)
data
# Check covariance
cov(data[,2:6])
# run model
jagsdata <- with(data, list(doy = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO)))
# run model
jagsdata <- with(data, list(doy = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO))
fit <- jags(data = data, model.file = lm_jags,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
library(rjags)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha+temp*doy[i]+runoff*doy[i]+ice_depth*doy[i]+SWE*doy[i] + PDO*doy[i]
y[i]~dnorm(mu[i], tau)
}
## Priors
temp ~ dnorm(0, 0.2)
runoff ~ dnorm(0, 0.2)
ice_depth ~ dnorm(0, 0.2)
SWE ~ dnorm(0, 0.2)
PDO ~ dnorm(0, 0.2)
sigma~dunif(0, 10) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# run model
jagsdata <- with(data, list(doy = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO))
fit <- jags(data = data, model.file = lm_jags,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
library(r2jags)
library(R2jags)
# run model
jagsdata <- with(data, list(doy = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO))
fit <- jags(data = data, model.file = lm_jags,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
# Parameters to estimate
params <- c("alpha", "sigma", "temp", "runoff", "ice_depth", "SWE", "PDO")
# Parameters to estimate
params <- c("alpha", "sigma", "temp", "runoff", "ice_depth", "SWE", "PDO")
# run model
jagsdata <- with(data, list(doy = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO))
fit <- jags(data = data, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
# run model
jagsdata <- with(data, list(doy = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(temp)))
fit <- jags(data = data, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
# run model
jagsdata <- with(data, list(doy = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(data$temp)))
fit <- jags(data = data, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
# run model
jagsdata <- with(data, list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = data, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
head(data)
# run model
jagsdata <- with(data, list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = data[,2:7], model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha+temp*doy[i]+runoff*doy[i]+ice_depth*doy[i]+SWE*doy[i] + PDO*doy[i]
y[i]~dnorm(mu[i], tau)
}
## Priors
temp ~ dnorm(0, 50)
runoff ~ dnorm(0, 10)
ice_depth ~ dnorm(0, 10)
SWE ~ dnorm(0, 10)
PDO ~ dnorm(0, 5)
sigma~dunif(0, 10) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "temp", "runoff", "ice_depth", "SWE", "PDO")
# run model
jagsdata <- with(data, list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = data[,2:7], model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
jagsdata
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:71) {
mu[i] <- alpha+temp*doy[i]+runoff*doy[i]+ice_depth*doy[i]+SWE*doy[i] + PDO*doy[i]
y[i]~dnorm(mu[i], tau)
}
## Priors
temp ~ dnorm(0, 50)
runoff ~ dnorm(0, 10)
ice_depth ~ dnorm(0, 10)
SWE ~ dnorm(0, 10)
PDO ~ dnorm(0, 5)
sigma~dunif(0, 10) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "temp", "runoff", "ice_depth", "SWE", "PDO")
# run model
jagsdata <- with(data, list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = data[,2:7], model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
head(data)
# run model
jagsdata <- with(data[,2:7], list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = data[,2:7], model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
head(data)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha+temp*doy[i]+runoff*doy[i]+ice_depth*doy[i]+SWE*doy[i] + PDO*doy[i]
y[i]~dnorm(mu[i], tau)
}
## Priors
temp ~ dnorm(0, 100)
runoff ~ dnorm(0, 2)
ice_depth ~ dnorm(0, 100)
SWE ~ dnorm(0, 100)
PDO ~ dnorm(0, 10)
sigma~dunif(0, 10) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "temp", "runoff", "ice_depth", "SWE", "PDO")
# run model
jagsdata <- with(data[,2:7], list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = data[,2:7], model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
jagsdata
# run model
jagsdata <- with(data[,2:7], list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha+temp*doy[i]+runoff*doy[i]+ice_depth*doy[i]+SWE*doy[i] #+ PDO*doy[i]
y[i]~dnorm(mu[i], tau)
}
## Priors
temp ~ dnorm(0, 100)
runoff ~ dnorm(0, 2)
ice_depth ~ dnorm(0, 100)
SWE ~ dnorm(0, 100)
#PDO ~ dnorm(0, 10)
sigma~dunif(0, 10) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Parameters to estimate
params <- c("alpha", "sigma", "temp", "runoff", "ice_depth", "SWE"#, "PDO"
)
# run model
jagsdata <- with(data[,2:7], list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, #PDO = PDO,
N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
head(data)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha + temp*doy[i] + runoff*doy[i] + ice_depth*doy[i] + SWE*doy[i] + PDO*doy[i]
y[i]~dnorm(mu[i], tau)
}
## Priors
alpha ~ dnorm(130, 100)
temp ~ dnorm(0, 100)
runoff ~ dnorm(0, 2)
ice_depth ~ dnorm(0, 100)
SWE ~ dnorm(0, 100)
PDO ~ dnorm(0, 10)
sigma~dunif(0, 10) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "temp", "runoff", "ice_depth", "SWE", "PDO")
# run model
jagsdata <- with(data[,2:7], list(y = doy, temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
head(data)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha + B1*temp[i] + B2*runoff[i] + B3*ice_depth[i] + B4*SWE[i] + B5*PDO[i]
y[i]~dnorm(mu[i], tau)
}
## Priors
alpha ~ dnorm(130, 100)
B1 ~ dnorm(0, 100)
B2 ~ dnorm(0, 2)
B3 ~ dnorm(0, 100)
B4 ~ dnorm(0, 100)
B5 ~ dnorm(0, 10)
sigma~dunif(0, 10) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "B1", "B2", "B3", "B4", "B5")
# run model
jagsdata <- with(data[,2:7], list(mu = doy , temp = temp, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
# run model
jagsdata <- with(data[,2:7], list(mu = doy , temp = temp, runoff = runoff, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
head(data)
data[,2:7]
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
doy[i] <- alpha + B1*temp[i] + B2*runoff[i] + B3*ice_depth[i] + B4*SWE[i] + B5*PDO[i]
y[i]~dnorm(doy[i], tau)
}
## Priors
alpha ~ dnorm(130, 100)
B1 ~ dnorm(0, 100)
B2 ~ dnorm(0, 2)
B3 ~ dnorm(0, 100)
B4 ~ dnorm(0, 100)
B5 ~ dnorm(0, 10)
sigma~dunif(0, 100) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "B1", "B2", "B3", "B4", "B5")
# run model
jagsdata <- with(data[,2:7], list(doy = doy , temp = temp, runoff = runoff, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha + B1*temp[i] + B2*runoff[i] + B3*ice_depth[i] + B4*SWE[i] + B5*PDO[i]
doy[i]~dnorm(mu, tau)
}
## Priors
alpha ~ dnorm(130, 100)
B1 ~ dnorm(0, 100)
B2 ~ dnorm(0, 2)
B3 ~ dnorm(0, 100)
B4 ~ dnorm(0, 100)
B5 ~ dnorm(0, 10)
sigma~dunif(0, 100) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "B1", "B2", "B3", "B4", "B5")
# run model
jagsdata <- with(data[,2:7], list(doy = doy , temp = temp, runoff = runoff, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
### JAGS model
lm_jags <- function(){
## Likelihood
for (i in 1:N) {
mu[i] <- alpha + B1*temp[i] + B2*runoff[i] + B3*ice_depth[i] + B4*SWE[i] + B5*PDO[i]
doy[i]~dnorm(mu[i], tau)
}
## Priors
alpha ~ dnorm(130, 100)
B1 ~ dnorm(0, 100)
B2 ~ dnorm(0, 2)
B3 ~ dnorm(0, 100)
B4 ~ dnorm(0, 100)
B5 ~ dnorm(0, 10)
sigma~dunif(0, 100) # Residual standard deviation
tau <- 1/(sigma*sigma) # Residual precision
}
# Chains and iterations
n.chains = 3
n.iter = 2000
n.burnin = 500
# Parameters to estimate
params <- c("alpha", "sigma", "B1", "B2", "B3", "B4", "B5")
# run model
jagsdata <- with(data[,2:7], list(doy = doy , temp = temp, runoff = runoff, ice_depth = ice_depth, SWE = SWE, PDO = PDO, N = length(doy)))
fit <- jags(data = jagsdata, model.file = lm_jags, parameters.to.save = params,
n.chains = n.chains, n.iter = n.iter, n.burnin = n.burnin)
fit
